// Generated by gencpp from file asctec_hl_comm/GpsCustom.msg
// DO NOT EDIT!


#ifndef ASCTEC_HL_COMM_MESSAGE_GPSCUSTOM_H
#define ASCTEC_HL_COMM_MESSAGE_GPSCUSTOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/NavSatStatus.h>

namespace asctec_hl_comm
{
template <class ContainerAllocator>
struct GpsCustom_
{
  typedef GpsCustom_<ContainerAllocator> Type;

  GpsCustom_()
    : header()
    , status()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , position_covariance()
    , position_covariance_type(0)
    , pressure_height(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_covariance()  {
      position_covariance.assign(0.0);

      velocity_covariance.assign(0.0);
  }
  GpsCustom_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , position_covariance()
    , position_covariance_type(0)
    , pressure_height(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_covariance()  {
  (void)_alloc;
      position_covariance.assign(0.0);

      velocity_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::NavSatStatus_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef boost::array<double, 9>  _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef uint8_t _position_covariance_type_type;
  _position_covariance_type_type position_covariance_type;

   typedef double _pressure_height_type;
  _pressure_height_type pressure_height;

   typedef double _velocity_x_type;
  _velocity_x_type velocity_x;

   typedef double _velocity_y_type;
  _velocity_y_type velocity_y;

   typedef boost::array<double, 4>  _velocity_covariance_type;
  _velocity_covariance_type velocity_covariance;





  typedef boost::shared_ptr< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> const> ConstPtr;

}; // struct GpsCustom_

typedef ::asctec_hl_comm::GpsCustom_<std::allocator<void> > GpsCustom;

typedef boost::shared_ptr< ::asctec_hl_comm::GpsCustom > GpsCustomPtr;
typedef boost::shared_ptr< ::asctec_hl_comm::GpsCustom const> GpsCustomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asctec_hl_comm::GpsCustom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asctec_hl_comm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'asctec_hl_comm': ['/home/mourams/hexv_ctl/src/asctec_mav_framework/asctec_hl_comm/msg', '/home/mourams/hexv_ctl/devel/share/asctec_hl_comm/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea845c87e3fc5ff92a4bebb639327746";
  }

  static const char* value(const ::asctec_hl_comm::GpsCustom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea845c87e3fc5ff9ULL;
  static const uint64_t static_value2 = 0x2a4bebb639327746ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asctec_hl_comm/GpsCustom";
  }

  static const char* value(const ::asctec_hl_comm::GpsCustom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Navigation Satellite fix for any Global Navigation Satellite System\n\
#\n\
# Specified using the WGS 84 reference ellipsoid\n\
\n\
# Header specifies ROS time and frame of reference for this fix.\n\
Header header\n\
\n\
# satellite fix status information\n\
sensor_msgs/NavSatStatus status\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south.\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid.\n\
float64 altitude\n\
\n\
# Position covariance [m^2] defined relative to a tangential plane\n\
# through the reported position. The components are East, North, and\n\
# Up (ENU), in row-major order.\n\
#\n\
# Beware: this coordinate system exhibits singularities at the poles.\n\
\n\
float64[9] position_covariance\n\
\n\
uint8 position_covariance_type\n\
\n\
float64 pressure_height\n\
\n\
float64 velocity_x\n\
float64 velocity_y\n\
float64[4] velocity_covariance\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/NavSatStatus\n\
# Navigation Satellite fix status for any Global Navigation Satellite System\n\
\n\
# Whether to output an augmented fix is determined by both the fix\n\
# type and the last time differential corrections were received.  A\n\
# fix is valid when status >= STATUS_FIX.\n\
\n\
int8 STATUS_NO_FIX =  -1        # unable to fix position\n\
int8 STATUS_FIX =      0        # unaugmented fix\n\
int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n\
int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\
\n\
int8 status\n\
\n\
# Bits defining which Global Navigation Satellite System signals were\n\
# used by the receiver.\n\
\n\
uint16 SERVICE_GPS =     1\n\
uint16 SERVICE_GLONASS = 2\n\
uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n\
uint16 SERVICE_GALILEO = 8\n\
\n\
uint16 service\n\
";
  }

  static const char* value(const ::asctec_hl_comm::GpsCustom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.position_covariance);
      stream.next(m.position_covariance_type);
      stream.next(m.pressure_height);
      stream.next(m.velocity_x);
      stream.next(m.velocity_y);
      stream.next(m.velocity_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsCustom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_hl_comm::GpsCustom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asctec_hl_comm::GpsCustom_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::sensor_msgs::NavSatStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "position_covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_covariance_type);
    s << indent << "pressure_height: ";
    Printer<double>::stream(s, indent + "  ", v.pressure_height);
    s << indent << "velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_y);
    s << indent << "velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.velocity_covariance.size(); ++i)
    {
      s << indent << "  velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASCTEC_HL_COMM_MESSAGE_GPSCUSTOM_H

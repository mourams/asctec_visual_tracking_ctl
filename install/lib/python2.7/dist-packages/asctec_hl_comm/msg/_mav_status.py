# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from asctec_hl_comm/mav_status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class mav_status(genpy.Message):
  _md5sum = "f975cbdf223868931f194323c62d7be5"
  _type = "asctec_hl_comm/mav_status"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

float32     battery_voltage
string      flight_mode_ll
string      state_estimation
string      position_control
bool        serial_interface_enabled
bool        serial_interface_active
float32     flight_time
float32     cpu_load

string      motor_status

string      gps_status
int32       gps_num_satellites 

int32       debug1
int32       debug2

bool        have_SSDK_parameters

uint32      tx_packets
uint32      tx_packets_good
uint32      rx_packets
uint32      rx_packets_good

float32     timesync_offset
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','battery_voltage','flight_mode_ll','state_estimation','position_control','serial_interface_enabled','serial_interface_active','flight_time','cpu_load','motor_status','gps_status','gps_num_satellites','debug1','debug2','have_SSDK_parameters','tx_packets','tx_packets_good','rx_packets','rx_packets_good','timesync_offset']
  _slot_types = ['std_msgs/Header','float32','string','string','string','bool','bool','float32','float32','string','string','int32','int32','int32','bool','uint32','uint32','uint32','uint32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,battery_voltage,flight_mode_ll,state_estimation,position_control,serial_interface_enabled,serial_interface_active,flight_time,cpu_load,motor_status,gps_status,gps_num_satellites,debug1,debug2,have_SSDK_parameters,tx_packets,tx_packets_good,rx_packets,rx_packets_good,timesync_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mav_status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.flight_mode_ll is None:
        self.flight_mode_ll = ''
      if self.state_estimation is None:
        self.state_estimation = ''
      if self.position_control is None:
        self.position_control = ''
      if self.serial_interface_enabled is None:
        self.serial_interface_enabled = False
      if self.serial_interface_active is None:
        self.serial_interface_active = False
      if self.flight_time is None:
        self.flight_time = 0.
      if self.cpu_load is None:
        self.cpu_load = 0.
      if self.motor_status is None:
        self.motor_status = ''
      if self.gps_status is None:
        self.gps_status = ''
      if self.gps_num_satellites is None:
        self.gps_num_satellites = 0
      if self.debug1 is None:
        self.debug1 = 0
      if self.debug2 is None:
        self.debug2 = 0
      if self.have_SSDK_parameters is None:
        self.have_SSDK_parameters = False
      if self.tx_packets is None:
        self.tx_packets = 0
      if self.tx_packets_good is None:
        self.tx_packets_good = 0
      if self.rx_packets is None:
        self.rx_packets = 0
      if self.rx_packets_good is None:
        self.rx_packets_good = 0
      if self.timesync_offset is None:
        self.timesync_offset = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.battery_voltage = 0.
      self.flight_mode_ll = ''
      self.state_estimation = ''
      self.position_control = ''
      self.serial_interface_enabled = False
      self.serial_interface_active = False
      self.flight_time = 0.
      self.cpu_load = 0.
      self.motor_status = ''
      self.gps_status = ''
      self.gps_num_satellites = 0
      self.debug1 = 0
      self.debug2 = 0
      self.have_SSDK_parameters = False
      self.tx_packets = 0
      self.tx_packets_good = 0
      self.rx_packets = 0
      self.rx_packets_good = 0
      self.timesync_offset = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.battery_voltage))
      _x = self.flight_mode_ll
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state_estimation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.position_control
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B2f().pack(_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load))
      _x = self.motor_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3iB4If().pack(_x.gps_num_satellites, _x.debug1, _x.debug2, _x.have_SSDK_parameters, _x.tx_packets, _x.tx_packets_good, _x.rx_packets, _x.rx_packets_good, _x.timesync_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.battery_voltage,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode_ll = str[start:end].decode('utf-8')
      else:
        self.flight_mode_ll = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_estimation = str[start:end].decode('utf-8')
      else:
        self.state_estimation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_control = str[start:end].decode('utf-8')
      else:
        self.position_control = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load,) = _get_struct_2B2f().unpack(str[start:end])
      self.serial_interface_enabled = bool(self.serial_interface_enabled)
      self.serial_interface_active = bool(self.serial_interface_active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_status = str[start:end].decode('utf-8')
      else:
        self.motor_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_status = str[start:end].decode('utf-8')
      else:
        self.gps_status = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.gps_num_satellites, _x.debug1, _x.debug2, _x.have_SSDK_parameters, _x.tx_packets, _x.tx_packets_good, _x.rx_packets, _x.rx_packets_good, _x.timesync_offset,) = _get_struct_3iB4If().unpack(str[start:end])
      self.have_SSDK_parameters = bool(self.have_SSDK_parameters)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.battery_voltage))
      _x = self.flight_mode_ll
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state_estimation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.position_control
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B2f().pack(_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load))
      _x = self.motor_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gps_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3iB4If().pack(_x.gps_num_satellites, _x.debug1, _x.debug2, _x.have_SSDK_parameters, _x.tx_packets, _x.tx_packets_good, _x.rx_packets, _x.rx_packets_good, _x.timesync_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.battery_voltage,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode_ll = str[start:end].decode('utf-8')
      else:
        self.flight_mode_ll = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_estimation = str[start:end].decode('utf-8')
      else:
        self.state_estimation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_control = str[start:end].decode('utf-8')
      else:
        self.position_control = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.serial_interface_enabled, _x.serial_interface_active, _x.flight_time, _x.cpu_load,) = _get_struct_2B2f().unpack(str[start:end])
      self.serial_interface_enabled = bool(self.serial_interface_enabled)
      self.serial_interface_active = bool(self.serial_interface_active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_status = str[start:end].decode('utf-8')
      else:
        self.motor_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_status = str[start:end].decode('utf-8')
      else:
        self.gps_status = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.gps_num_satellites, _x.debug1, _x.debug2, _x.have_SSDK_parameters, _x.tx_packets, _x.tx_packets_good, _x.rx_packets, _x.rx_packets_good, _x.timesync_offset,) = _get_struct_3iB4If().unpack(str[start:end])
      self.have_SSDK_parameters = bool(self.have_SSDK_parameters)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2f = None
def _get_struct_2B2f():
    global _struct_2B2f
    if _struct_2B2f is None:
        _struct_2B2f = struct.Struct("<2B2f")
    return _struct_2B2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3iB4If = None
def _get_struct_3iB4If():
    global _struct_3iB4If
    if _struct_3iB4If is None:
        _struct_3iB4If = struct.Struct("<3iB4If")
    return _struct_3iB4If
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

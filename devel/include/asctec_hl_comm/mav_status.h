// Generated by gencpp from file asctec_hl_comm/mav_status.msg
// DO NOT EDIT!


#ifndef ASCTEC_HL_COMM_MESSAGE_MAV_STATUS_H
#define ASCTEC_HL_COMM_MESSAGE_MAV_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace asctec_hl_comm
{
template <class ContainerAllocator>
struct mav_status_
{
  typedef mav_status_<ContainerAllocator> Type;

  mav_status_()
    : header()
    , battery_voltage(0.0)
    , flight_mode_ll()
    , state_estimation()
    , position_control()
    , serial_interface_enabled(false)
    , serial_interface_active(false)
    , flight_time(0.0)
    , cpu_load(0.0)
    , motor_status()
    , gps_status()
    , gps_num_satellites(0)
    , debug1(0)
    , debug2(0)
    , have_SSDK_parameters(false)
    , tx_packets(0)
    , tx_packets_good(0)
    , rx_packets(0)
    , rx_packets_good(0)
    , timesync_offset(0.0)  {
    }
  mav_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , battery_voltage(0.0)
    , flight_mode_ll(_alloc)
    , state_estimation(_alloc)
    , position_control(_alloc)
    , serial_interface_enabled(false)
    , serial_interface_active(false)
    , flight_time(0.0)
    , cpu_load(0.0)
    , motor_status(_alloc)
    , gps_status(_alloc)
    , gps_num_satellites(0)
    , debug1(0)
    , debug2(0)
    , have_SSDK_parameters(false)
    , tx_packets(0)
    , tx_packets_good(0)
    , rx_packets(0)
    , rx_packets_good(0)
    , timesync_offset(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flight_mode_ll_type;
  _flight_mode_ll_type flight_mode_ll;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_estimation_type;
  _state_estimation_type state_estimation;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _position_control_type;
  _position_control_type position_control;

   typedef uint8_t _serial_interface_enabled_type;
  _serial_interface_enabled_type serial_interface_enabled;

   typedef uint8_t _serial_interface_active_type;
  _serial_interface_active_type serial_interface_active;

   typedef float _flight_time_type;
  _flight_time_type flight_time;

   typedef float _cpu_load_type;
  _cpu_load_type cpu_load;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_status_type;
  _motor_status_type motor_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps_status_type;
  _gps_status_type gps_status;

   typedef int32_t _gps_num_satellites_type;
  _gps_num_satellites_type gps_num_satellites;

   typedef int32_t _debug1_type;
  _debug1_type debug1;

   typedef int32_t _debug2_type;
  _debug2_type debug2;

   typedef uint8_t _have_SSDK_parameters_type;
  _have_SSDK_parameters_type have_SSDK_parameters;

   typedef uint32_t _tx_packets_type;
  _tx_packets_type tx_packets;

   typedef uint32_t _tx_packets_good_type;
  _tx_packets_good_type tx_packets_good;

   typedef uint32_t _rx_packets_type;
  _rx_packets_type rx_packets;

   typedef uint32_t _rx_packets_good_type;
  _rx_packets_good_type rx_packets_good;

   typedef float _timesync_offset_type;
  _timesync_offset_type timesync_offset;





  typedef boost::shared_ptr< ::asctec_hl_comm::mav_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_hl_comm::mav_status_<ContainerAllocator> const> ConstPtr;

}; // struct mav_status_

typedef ::asctec_hl_comm::mav_status_<std::allocator<void> > mav_status;

typedef boost::shared_ptr< ::asctec_hl_comm::mav_status > mav_statusPtr;
typedef boost::shared_ptr< ::asctec_hl_comm::mav_status const> mav_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asctec_hl_comm::mav_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asctec_hl_comm::mav_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asctec_hl_comm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'asctec_hl_comm': ['/home/mourams/hexv_ctl/src/asctec_mav_framework/asctec_hl_comm/msg', '/home/mourams/hexv_ctl/devel/share/asctec_hl_comm/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asctec_hl_comm::mav_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asctec_hl_comm::mav_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asctec_hl_comm::mav_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f975cbdf223868931f194323c62d7be5";
  }

  static const char* value(const ::asctec_hl_comm::mav_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf975cbdf22386893ULL;
  static const uint64_t static_value2 = 0x1f194323c62d7be5ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asctec_hl_comm/mav_status";
  }

  static const char* value(const ::asctec_hl_comm::mav_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float32     battery_voltage\n\
string      flight_mode_ll\n\
string      state_estimation\n\
string      position_control\n\
bool        serial_interface_enabled\n\
bool        serial_interface_active\n\
float32     flight_time\n\
float32     cpu_load\n\
\n\
string      motor_status\n\
\n\
string      gps_status\n\
int32       gps_num_satellites \n\
\n\
int32       debug1\n\
int32       debug2\n\
\n\
bool        have_SSDK_parameters\n\
\n\
uint32      tx_packets\n\
uint32      tx_packets_good\n\
uint32      rx_packets\n\
uint32      rx_packets_good\n\
\n\
float32     timesync_offset\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::asctec_hl_comm::mav_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.battery_voltage);
      stream.next(m.flight_mode_ll);
      stream.next(m.state_estimation);
      stream.next(m.position_control);
      stream.next(m.serial_interface_enabled);
      stream.next(m.serial_interface_active);
      stream.next(m.flight_time);
      stream.next(m.cpu_load);
      stream.next(m.motor_status);
      stream.next(m.gps_status);
      stream.next(m.gps_num_satellites);
      stream.next(m.debug1);
      stream.next(m.debug2);
      stream.next(m.have_SSDK_parameters);
      stream.next(m.tx_packets);
      stream.next(m.tx_packets_good);
      stream.next(m.rx_packets);
      stream.next(m.rx_packets_good);
      stream.next(m.timesync_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mav_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_hl_comm::mav_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asctec_hl_comm::mav_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "flight_mode_ll: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flight_mode_ll);
    s << indent << "state_estimation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_estimation);
    s << indent << "position_control: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position_control);
    s << indent << "serial_interface_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_interface_enabled);
    s << indent << "serial_interface_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_interface_active);
    s << indent << "flight_time: ";
    Printer<float>::stream(s, indent + "  ", v.flight_time);
    s << indent << "cpu_load: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_load);
    s << indent << "motor_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_status);
    s << indent << "gps_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps_status);
    s << indent << "gps_num_satellites: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_num_satellites);
    s << indent << "debug1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.debug1);
    s << indent << "debug2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.debug2);
    s << indent << "have_SSDK_parameters: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.have_SSDK_parameters);
    s << indent << "tx_packets: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tx_packets);
    s << indent << "tx_packets_good: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tx_packets_good);
    s << indent << "rx_packets: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rx_packets);
    s << indent << "rx_packets_good: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rx_packets_good);
    s << indent << "timesync_offset: ";
    Printer<float>::stream(s, indent + "  ", v.timesync_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASCTEC_HL_COMM_MESSAGE_MAV_STATUS_H
